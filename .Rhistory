#V1 is value function from budget-balanced reform
#Estimate WTP as a reduction in earnings, or lump sum payment:
simdata1[,emp:=jobloss_orig!=1]
simdata1[,spemp:=(2*(single==1))+(spjobloss_orig!=1&single==0)]
simdata1[,row:=seq.int(nrow(simdata1))]
simdata1[,lowerasset:=min(get("Asset",globalenv())[Type,time+1,]),by=row]
simdata1[,upperasset:=max(get("Asset",globalenv())[Type,time+1,]),by=row]
simdata1[,wtp_budgetbal:=Assetval_solve(V0,Type,time,i,Wage_orig,spWage_orig,Asset_orig,DI_orig,emp,spemp,Health,spHealth,V1,
get("Wage",globalenv()),get("spWage",globalenv()),get("Asset",globalenv()),plotname),by=row]
#examine distribution of V-V_orig by observables, at fixed ages
for(a in plotages){
for(trim in c(0.01,0.05,0.10,0.20)){
for(var in c("V","Asset","GrossOutput")){
varquants<-quantile(simdata1[age==a,(get(var)-get(paste0(var,"_orig")))/abs(get(paste0(var,"_orig")))],probs=c(trim,1-trim),na.rm=TRUE)
pdf(paste0(path,plotname,"_", var,"_distage",a,'_trim',trim,'.pdf'))
print(ggplot(data=simdata1[age==a,],
aes(x=(get(var)-get(paste0(var,"_orig")))/abs(get(paste0(var,"_orig"))),
group=interaction(Type,single)))
+geom_density(aes(color=as.factor(Type), linetype=as.factor(single)), size=1.5)
+geom_vline(xintercept=0,linetype="dashed")
+xlim(c(varquants[1],varquants[2]))
+scale_linetype_manual(values=c("solid","dotted"),labels=c("Married","Single"))
+labs(linetype="Marital Status",color="Household Type",
y="Density",
x=paste0("Proportional Change in ",var))
+theme(legend.position="bottom",legend.box="vertical")
)
print(ggplot(data=simdata1[age==a,],
aes(x=(get(var)-get(paste0(var,"_orig"))),
group=interaction(Type,single)))
+geom_density(aes(color=as.factor(Type), linetype=as.factor(single)), size=1.5)
+geom_vline(xintercept=0,linetype="dashed")
+xlim(c(varquants[1],varquants[2]))
+scale_linetype_manual(values=c("solid","dotted"),labels=c("Married","Single"))
+labs(linetype="Marital Status",color="Household Type",
y="Density",
x=paste0("Change in ",var))
+theme(legend.position="bottom",legend.box="vertical")
)
print(ggplot(data=simdata1[age==a,],
aes(y=(get(var)-get(paste0(var,"_orig"))),
x = get(paste0(var,"_orig")),
group=interaction(Type,single)))
+geom_smooth(aes(color=as.factor(Type), linetype=as.factor(single)), size=1.5)
+geom_vline(xintercept=0,linetype="dashed")
+xlim(c(varquants[1],varquants[2]))
+scale_linetype_manual(values=c("solid","dotted"),labels=c("Married","Single"))
+labs(linetype="Marital Status",color="Household Type",
x=var,
y=paste0("Change in ",var))
+theme(legend.position="bottom",legend.box="vertical")
)
dev.off()
}
wtpquants<-quantile(simdata1[ age == a & ! is.infinite(wtp_budgetbal),wtp_budgetbal],probs=c(trim,1-trim))
pdf(paste0(path,"/wtp/",plotname,"_wtp_distage",a,'_trim',trim,'.pdf'))
print(ggplot(data=simdata1[ age == a & ! is.infinite(wtp_budgetbal),],
aes(x=wtp_budgetbal,group=interaction(Type,single)))
+geom_density(aes(color=as.factor(Type), linetype = as.factor(single)),size=1.5)
+xlim(c(min(wtpquants[1],0),max(0,wtpquants[2])))
+geom_vline(xintercept=0,linetype="dashed")
+scale_linetype_manual(values=c("solid","dotted"),labels=c("Married","Single"))
+labs(linetype="Marital Status",color="Household Type",
y="Density",
x="Lump Sum Willingness to Pay")
+theme(legend.position="bottom",legend.box="vertical")
)
wtpquants<-quantile(simdata1[ age == a & ! is.infinite(wtp_budgetbal),wtp_budgetbal/Asset_orig],probs=c(trim,1-trim), na.rm=TRUE)
print(ggplot(data=simdata1[ age == a & ! is.infinite(wtp_budgetbal),],
aes(x=wtp_budgetbal/Asset_orig,group=interaction(Type,single)))
+geom_density(aes(color=as.factor(Type), linetype = as.factor(single)),size=1.5)
+geom_vline(xintercept=0,linetype="dashed")
+scale_linetype_manual(values=c("solid","dotted"),labels=c("Married","Single"))
+xlim(c(min(0,wtpquants[1]),max(0,wtpquants[2])))
+labs(linetype="Marital Status",color="Household Type",
y="Density",
x="Willingness to Pay as a Proportion of Assets")
+theme(legend.position="bottom",legend.box="vertical")
)
dev.off()
}
}
return(list(simdata=simdata1,extra_tax=extra_tax, budgetbal_summary=budgetbal_summary))
}
###CONSEQUENCES OF REFORMS WHICH LEAD TO X% DROP IN DI ROLLS####
paramadjust<-function(reformname,adjust,params,param_input){
params1<-params
param_input1<-param_input
if(reformname=="DI Generosity (%)") params1$SSgenerosity<-params$SSgenerosity*adjust
if(reformname=="DI Stringency (%)") {
param_input1[35:40]<-pmax(pmin(param_input1[35:40]*(adjust),1),0)
}
return(list(params=params1,param_input=param_input1))
}
rollreduce<-function(path, rollchange = 0.1, reducetype="rolls", V0, simdata, reformname, plotname, param_input, params, healthprob, marriageprob,foodstamps,numkids,oecd,
shocks.wage,shocks.spwage,shocks.health,shocks.allow,shocks.reassess,shocks.jobloss,shocks.spjobloss,
shocks.marriage, marriageprob_init,numsims,
onlysingle, onlymarried, onlyFT, workDI=0, earlyDI=0,
roll_tol=2.5e-3, plotages = c(23,35,45,55), tablenames=FALSE, append=TRUE) {
if(reducetype=="roll"){
Rolls<-simdata[,sum(yearDI)]
Rolls_target<-simdata[,sum(yearDI)]*(1-rollchange)
}
if(reducetype=="fiscal"){
Rolls<-simdata[yearDI==1,sum(Transfers)]
Rolls_target<-simdata[yearDI==1,sum(Transfers)]*(1-rollchange)
}
#Solving value functions with reform:
#Defining function to easily resimulate with new parameters:
roll_resim<- function(reformname, adjust, params, param_input){
sim<-Valsim_solve(as.vector(paramadjust(reformname, adjust, params, param_input)$param_input),
paramadjust(reformname, adjust, params, param_input)$params,
healthprob, marriageprob,foodstamps,numkids,oecd,aperm(Asset),aperm(Wage), aperm(spWage),
shocks.wage,shocks.spwage,shocks.health,shocks.allow,shocks.reassess,shocks.jobloss,shocks.spjobloss, shocks.marriage,
marriageprob_init,numsims,0,0,0,print=0,workDI=0,onlyFT=1)
sim<-cleansim(sim,select=select,selectC=selectC)
return(sim)
}
adjust <- 0.5
adjustlow <- 0
adjusthigh<- 1
#Resimulate takes as its arguments the choice-specific value functions and a wage tax.
#It spits out a new simulated dataset accounting for effects of tax on behaviors
while(abs(Rolls-Rolls_target) > roll_tol*(abs(Rolls)+abs(Rolls_target))) {
print(paste("Current and target  numbers are:", Rolls,"and",Rolls_target))
print(paste("From adjust", adjust))
adjust <- (adjusthigh+adjustlow)/2
simdata1<-roll_resim(reformname, adjust, params, param_input)
if(reducetype=="roll"){
Rolls<- simdata1[,sum(yearDI)]
}
if(reducetype=="fiscal"){
Rolls<-simdata1[yearDI==1,sum(Transfers)]
}
if(Rolls > Rolls_target) adjusthigh<-adjust
if(Rolls < Rolls_target) adjustlow<-adjust
}
##Simulating one more time, to print value matrices.
simdata1<-Valsim_solve(as.vector(paramadjust(reformname, adjust, params, param_input)$param_input),
paramadjust(reformname, adjust, params, param_input)$params,
healthprob, marriageprob,foodstamps,numkids,oecd,aperm(Asset),aperm(Wage), aperm(spWage),
shocks.wage,shocks.spwage,shocks.health,shocks.allow,shocks.reassess,shocks.jobloss,shocks.spjobloss, shocks.marriage,
marriageprob_init,numsims,0,0,0,print=1,workDI=0,onlyFT=1)
simdata1<-cleansim(simdata1,select=select,selectC=selectC)
meanflow<-abs(simdata[age <= 62,mean(flow(Ceq,Work,spWork,single,Health,spHealth,param_input))])
simdata1 <- merge(simdata[,.(i,time,V,GrossOutput,Wage,spWage,Asset,jobloss, spjobloss, DI, Apply, yearDI)],simdata1,by=c("i","time"),all=TRUE, suffixes=c("_orig",""))
simdata1<-simdata1[order(single,Type),]
roll_summary<-data.table()
for(byg in c("neither","single","Type","both")){
if(byg=="neither") bygroups<-""
else if(byg=="both")bygroups<-c("single","Type")
else bygroups<-byg
roll_sum <- cbind(reform=reformname,
adjustment=adjust,
proportional_change_V=simdata1[time==0,mean(V-V_orig)/abs(mean(V_orig)),by=eval(bygroups)]$V1,
level_change_V=simdata1[time==0,mean(V-V_orig)*100/meanflow,by=eval(bygroups)]$V1,
simdata1[age <= 62, .(proportional_change_Output=sum(GrossOutput-GrossOutput_orig)/sum(GrossOutput_orig),
level_change_Output=mean(GrossOutput-GrossOutput_orig)/1000,
proportional_change_Apply=sum(Apply-Apply_orig)/sum(Apply_orig),
level_change_Apply=mean(Apply-Apply_orig)*100,
proportional_change_Rolls=sum(yearDI-yearDI_orig)/sum(yearDI_orig),
level_change_Rolls=mean(yearDI-yearDI_orig)*100,
N=.N),by=eval(bygroups)],
simdata1[age <= 62 & Health==1, .(proportional_change_Output_H1=sum(GrossOutput-GrossOutput_orig)/sum(GrossOutput_orig),
level_change_Output_H1=mean(GrossOutput-GrossOutput_orig)/1000,
proportional_change_Apply_H1=sum(Apply-Apply_orig)/sum(Apply_orig),
level_change_Apply_H1=mean(Apply-Apply_orig)*100,
proportional_change_Rolls_H1=sum(yearDI-yearDI_orig)/sum(yearDI_orig),
level_change_Rolls_H1=mean(yearDI-yearDI_orig)*100,
N_H1=.N),
by=eval(bygroups)][,-c("Type","single"),with=FALSE],
simdata1[age <= 62 & Health==2, .(proportional_change_Output_H2=sum(GrossOutput-GrossOutput_orig)/sum(GrossOutput_orig),
level_change_Output_H2=mean(GrossOutput-GrossOutput_orig)/1000,
proportional_change_Apply_H2=sum(Apply-Apply_orig)/sum(Apply_orig),
level_change_Apply_H2=mean(Apply-Apply_orig)*100,
proportional_change_Rolls_H2=sum(yearDI-yearDI_orig)/sum(yearDI_orig),
level_change_Rolls_H2=mean(yearDI-yearDI_orig)*100,
N_H2=.N),by=eval(bygroups)][,-c("Type","single"),with=FALSE],
simdata1[age <= 62 & Health==3, .(proportional_change_Output_H3=sum(GrossOutput-GrossOutput_orig)/sum(GrossOutput_orig),
level_change_Output_H3=mean(GrossOutput-GrossOutput_orig)/1000,
proportional_change_Apply_H3=sum(Apply-Apply_orig)/sum(Apply_orig),
level_change_Apply_H3=mean(Apply-Apply_orig)*100,
proportional_change_Rolls_H3=sum(yearDI-yearDI_orig)/sum(yearDI_orig),
level_change_Rolls_H3=mean(yearDI-yearDI_orig)*100,
N_H3=.N),by=eval(bygroups)][,-c("Type","single"),with=FALSE])
if(byg=="neither"){
roll_sum[,Type:=NA]
roll_sum[,single:=NA]
}
if(byg=="single") roll_sum[,Type:=NA]
if(byg=="Type") roll_sum[,single:=NA]
roll_summary<-rbind(roll_summary,roll_sum)
}
roll_summary[,single:=as.character(single)]
roll_summary[single=="0",single:="Married"]
roll_summary[single=="1",single:="Single"]
roll_summary<-as.data.table(roll_summary)
setcolorder(roll_summary,c("reform","Type","single","adjustment","proportional_change_V","level_change_V",
"proportional_change_Output","level_change_Output","proportional_change_Apply",
"level_change_Apply","proportional_change_Rolls","level_change_Rolls"))
tbl_prop<-xtable(roll_summary[,c("Type","single","adjustment","proportional_change_V",
"proportional_change_Output","proportional_change_Apply",
"proportional_change_Rolls"),with=FALSE],
type="latex",digits=3)
tbl_level<-xtable(roll_summary[,c("Type","single","adjustment","level_change_V",
"level_change_Output","level_change_Apply",
"level_change_Rolls"),with=FALSE],
type="latex",digits=3)
colnames(tbl_prop)<-c("Type","Marital Status","Adjustment","Welfare","Output",
"Applications", "DI Rolls")
print(tbl_prop,file=paste0(path,plotname,"_",reducetype,"_effects_proportional.tex"),tabular.environment='tabular',floating=FALSE,include.colnames=TRUE,include.rownames=FALSE)
colnames(tbl_level)<-c("Type","Marital Status","Adjustment","Welfare","Output",
"Applications", "Rolls")
print(tbl_level,file=paste0(path,plotname,"_",reducetype,"_effects_level.tex"),tabular.environment='tabular',floating=FALSE,include.colnames=TRUE,include.rownames=FALSE)
#examine willingness to pay for budget-balanced policy:
#V0 is the value function from baseline simulations
#V1 is value function from budget-balanced reform
#Estimate WTP as a reduction in earnings, or lump sum payment:
simdata1[,emp:=jobloss_orig!=1]
simdata1[,spemp:=(2*(single==1))+(spjobloss_orig!=1&single==0)]
simdata1[,row:=seq.int(nrow(simdata1))]
simdata1[,lowerasset:=min(get("Asset",globalenv())[Type,time+1,]),by=row]
simdata1[,upperasset:=max(get("Asset",globalenv())[Type,time+1,]),by=row]
temp <-read.csv(paste0("V.csv"),header=FALSE)[,1:numtypes]
V1<-array(NA,c(numtypes,50,dim(Wage)[3],dim(spWage)[3],dim(Asset)[3],2,3,3,3,2))
V1<-aperm(V1)
V1[,,,,,,,,,1]<-temp[,1]
V1[,,,,,,,,,2]<-temp[,2]
V1[,,,,,,,,,3]<-temp[,3]
V1<-aperm(V1)
simdata1[,wtp_rollbal:=Assetval_solve(V0,Type,time,i,Wage_orig,spWage_orig,Asset_orig,DI_orig,emp,spemp,Health,spHealth,V1,
get("Wage",globalenv()),get("spWage",globalenv()),get("Asset",globalenv()),plotname),by=row]
#examine distribution of V-V_orig by observables, at fixed ages
for(a in plotages){
for(trim in c(0.01,0.05,0.10,0.20)){
for(var in c("V","Asset","GrossOutput")){
varquants<-quantile(simdata1[age==a,(get(var)-get(paste0(var,"_orig")))/abs(get(paste0(var,"_orig")))],probs=c(trim,1-trim),na.rm=TRUE)
pdf(paste0(path,plotname,"_",reducetype,"_", var,"_distage",a,'_trim',trim,'.pdf'))
print(ggplot(data=simdata1[age==a,],
aes(x=(get(var)-get(paste0(var,"_orig")))/abs(get(paste0(var,"_orig"))),
group=interaction(Type,single)))
+geom_density(aes(color=as.factor(Type), linetype=as.factor(single)), size=1.5)
+geom_vline(xintercept=0,linetype="dashed")
+xlim(c(varquants[1],varquants[2]))
+scale_linetype_manual(values=c("solid","dotted"),labels=c("Married","Single"))
+labs(linetype="Marital Status",color="Household Type",
y="Density",
x=paste0("Proportional Change in ",var))
+theme(legend.position="bottom",legend.box="vertical")
)
print(ggplot(data=simdata1[age==a,],
aes(x=(get(var)-get(paste0(var,"_orig"))),
group=interaction(Type,single)))
+geom_density(aes(color=as.factor(Type), linetype=as.factor(single)), size=1.5)
+geom_vline(xintercept=0,linetype="dashed")
+xlim(c(varquants[1],varquants[2]))
+scale_linetype_manual(values=c("solid","dotted"),labels=c("Married","Single"))
+labs(linetype="Marital Status",color="Household Type",
y="Density",
x=paste0("Change in ",var))
+theme(legend.position="bottom",legend.box="vertical")
)
print(ggplot(data=simdata1[age==a,],
aes(y=(get(var)-get(paste0(var,"_orig"))),
x = get(paste0(var,"_orig")),
group=interaction(Type,single)))
+geom_smooth(aes(color=as.factor(Type), linetype=as.factor(single)), size=1.5)
+geom_vline(xintercept=0,linetype="dashed")
+xlim(c(varquants[1],varquants[2]))
+scale_linetype_manual(values=c("solid","dotted"),labels=c("Married","Single"))
+labs(linetype="Marital Status",color="Household Type",
x=var,
y=paste0("Change in ",var))
+theme(legend.position="bottom",legend.box="vertical")
)
dev.off()
}
wtpquants<-quantile(simdata1[ age == a & ! is.infinite(wtp_rollbal),wtp_rollbal],probs=c(trim,1-trim))
pdf(paste0(path,"/wtp/",plotname,"_",reducetype,"_wtp_distage",a,'_trim',trim,'.pdf'))
print(ggplot(data=simdata1[ age == a & ! is.infinite(wtp_rollbal),],
aes(x=wtp_rollbal,group=interaction(Type,single)))
+geom_density(aes(color=as.factor(Type), linetype = as.factor(single)),size=1.5)
+xlim(c(min(wtpquants[1],0),max(0,wtpquants[2])))
+geom_vline(xintercept=0,linetype="dashed")
+scale_linetype_manual(values=c("solid","dotted"),labels=c("Married","Single"))
+labs(linetype="Marital Status",color="Household Type",
y="Density",
x="Lump Sum Willingness to Pay")
+theme(legend.position="bottom",legend.box="vertical")
)
wtpquants<-quantile(simdata1[ age == a & ! is.infinite(wtp_rollbal),wtp_rollbal/Asset_orig],probs=c(trim,1-trim), na.rm=TRUE)
print(ggplot(data=simdata1[ age == a & ! is.infinite(wtp_rollbal),],
aes(x=wtp_rollbal/Asset_orig,group=interaction(Type,single)))
+geom_density(aes(color=as.factor(Type), linetype = as.factor(single)),size=1.5)
+geom_vline(xintercept=0,linetype="dashed")
+scale_linetype_manual(values=c("solid","dotted"),labels=c("Married","Single"))
+xlim(c(min(0,wtpquants[1]),max(0,wtpquants[2])))
+labs(linetype="Marital Status",color="Household Type",
y="Density",
x="Willingness to Pay as a Proportion of Assets")
+theme(legend.position="bottom",legend.box="vertical")
)
dev.off()
}
}
return(list(simdata=simdata1,adjustment=adjust, roll_summary=roll_summary))
}
cleansim<-function(simdata,select,selectC){
simdata<-as.data.table(simdata)
simdata[,Health:=Health+1]
simdata[,spHealth:=spHealth+1]
print(simdata[C<=0])
simdata[,row:=1:nrow(simdata)]
simdata[,Ceq:=C/oecd[[Type+1]][time+1],by=row]
simdata[,age:=floor(time/params$agelength+23)]
simdata[,ageold:=age>45*params$agelength]
simdata[,yearcons:=sum(Ceq),by=.(age,i,Type)]
simdata[,yearDI:=DI==2 & age<=62*params$agelength]
simdata[,select:=select]
simdata[,selectC:=selectC]
simdata[select==1,enterDI:=yearDI==1&c(NA,yearDI[-.N])==0&time<62*params$agelength,by=i]
simdata[,ApplyLast:=c(NA,Apply[-.N]),by=i]
simdata[,HealthLast:=c(NA,Health[-.N]),by=i]
simdata[select==1&yearDI==1&enterDI!=1,enterDI:=NA]
simdata[,Type:=Type+1]
}
setwd('~/Dropbox/DynamicDI/StructuralModel')
#setwd('~/Dropbox/DynamicDI/StructuralModel')
source("Welfare_ParallelSpouseC.R")
noelasticities<-1
obsdraws<- as.data.table(read.dta13("psid_obs.dta"))
obsdraws_cons<-as.data.table(read.dta13("psid_obs_cons.dta"))
#NEED TO CORRECT DATAMOMENTS AND INVVARCOV:
#invvarcov<-solve(as.matrix(read.table("~/Dropbox/DynamicDI/Low and Pistaferri/Code LP AER_Simulations/Code HL/varcovar30.inp",row.names=NULL)))
temp<-as.data.table(read.table("consmoments_all.txt"))
temp$V2<-as.numeric(as.character(temp$V2))
temp$V3<-as.numeric(as.character(temp$V3))
consmoments_all<-temp[,V2]
consse_all<-temp[,V3]
temp<-as.data.table(read.table("consmoments_single.txt"))
temp$V2<-as.numeric(as.character(temp$V2))
temp$V3<-as.numeric(as.character(temp$V3))
consmoments_single<-temp[,V2]
consse_single<-temp[,V3]
temp<-as.data.table(read.table("consmoments_married.txt"))
temp$V2<-as.numeric(as.character(temp$V2))
temp$V3<-as.numeric(as.character(temp$V3))
consmoments_married<-temp[,V2]
consse_married<-temp[,V3]
temp<-read.table("workmoments_1.txt")
workfullmoments_married<-temp[1:6,1]
workfullse_married<-temp[1:6,2]
workpartmoments_married<-temp[7:12,1]
workpartse_married<-temp[7:12,2]
temp<-read.table("workmoments_0.txt")
workfullmoments_single<-temp[1:6,1]
workpartmoments_single<-temp[7:12,1]
workfullse_single<-temp[1:6,2]
workpartse_single<-temp[7:12,2]
temp<-read.table("spworkmoments_1.txt")
spworkfullmoments<-temp[1:4,1]
spworkfullse<-temp[1:4,2]
spworkpartmoments<-temp[5:8,1]
spworkpartse<-temp[5:8,2]
temp<-read.table("stockDImoments.txt")
stockDImoments_all<-temp$EST
stockDIse_all <- temp$SE
stockDImoments_single<-temp$EST[1:6]
stockDIse_single<-temp$SE[1:6]
stockDImoments_married<-temp$EST[7:12]
stockDIse_married<-temp$SE[7:12]
temp<-read.table("compDImoments.txt")
compDImoments_all<-temp$EST
compDIse_all<-temp$SE
compDImoments_single<-temp$EST[1:6]
compDIse_single<-temp$SE[1:6]
compDImoments_married<-temp$EST[7:12]
compDIse_married<-temp$SE[7:12]
temp<-read.table("flowDImoments.txt")
flowDImoments<-temp$EST
flowDIse<- temp$SE
temp<-read.table("jointworkmoments.txt")
jointworkmoments<-temp$EST #(no work, no spwork), (no work, sp work), (work, no spwork), (work, spwork)
jointworkse<-temp$SE
temp<-read.table("jointworkpartmoments.txt")
jointworkpartmoments<-temp$EST #(no work, no spwork), (no work, sp work), (work, no spwork), (work, spwork)
jointworkpartse<-temp$SE
#NOTE: need to adjust more than just this parameter if changing number of house types
numtypes<-3
agelength<-1
particles<-15 # no. particles in the particle swarm search
#print(mpi.universe.size()-1)
seed=6327
partic_mult<-2
threads<-10
temp<-wagesetup(0,0,wage_gridsize=10,spwage_gridsize=5)
Wage<-temp$Wage
spWage<-temp$spWage
wagepars<-temp$wagepars
spwagepars<-temp$spwagepars
#spwagepars$wagevar<-0
rm(temp)
wagecov<-matrix(c(wagepars$wagevar^2,wagepars$wagecorr*(wagepars$wagevar*spwagepars$wagevar),
wagepars$wagecorr*(wagepars$wagevar*spwagepars$wagevar),spwagepars$wagevar^2),2,2)
states<-statesetup(dir="/home/mdkellogg/StructuralModel",asset_gridsize=20,wage_gridsize=10)
Asset<-states$Asset
foodstamps<-states$foodstamps
numkids<-states$numkids
healthprob<-states$healthprob
marriageprob<-states$marriageprob
marriageprob_init<-states$marriageprob_init
marriageprob<-marriageprob
marriageprob_init_single<-c(0,0,0)
# marriageprob_single<-marriageprob
# marriageprob_single[[1]][,2]<-0
# marriageprob_single[[2]][,2]<-0
# marriageprob_single[[3]][,2]<-0
marriageprob_init_married<-c(1,1,1)
# marriageprob_married<-marriageprob
# marriageprob_married[[1]][,1]<-1
# marriageprob_married[[2]][,1]<-1
# marriageprob_married[[3]][,1]<-1
oecd<-states$oecd
numS=10
numsims<-round(c(890*numS,1319*numS,757*numS))
numsims_single<-round(c(890*numS,1319*numS,757*numS)*(1-marriageprob_init))
numsims_married<-round(c(890*numS,1319*numS,757*numS)*(marriageprob_init))
testmar<-function(time){
out<-NULL
for(ty in 1:length(marriageprob_init)){
out[ty]<-marriageprob_init[ty]
for(t in 1:time){
out[ty]<-out[ty]*marriageprob[[ty]][t,1]+(1-out[ty])*marriageprob[[ty]][t,2]
}
}
return(out)
}
testhealth<-function(time){
out<-matrix(c(1,0,0,0,0,0),3,6,byrow=TRUE)
for(ty in 1:3){
for(t in 1:time){
for(s in 1:6){
out[ty,s]<-out[ty,]%*%healthprob[[ty]][t,,s]
}
}
}
return(out)
}
set.seed(seed)
partnershocks<-exp(rmvnorm(50*sum(numsims),c(0,0),sigma=wagecov))
shocks.wage <- partnershocks[,1]
shocks.spwage <- partnershocks[,2]
shocks.health<- runif(50*sum(numsims))
shocks.allow<- runif(50*sum(numsims))
shocks.reassess<- runif(50*sum(numsims))
shocks.jobloss<- runif(50*sum(numsims))
shocks.spjobloss<- runif(50*sum(numsims))
shocks.marriage<- runif(50*sum(numsims))
select<-drawselect(numsims)
selectC<-drawselectC(numsims)
set.seed(seed)
partnershocks<-exp(rmvnorm(50*sum(numsims_single),c(0,0),sigma=wagecov))
shocks.wage_single <- partnershocks[,1]
shocks.spwage_single <- partnershocks[,2]
shocks.health_single<- runif(50*sum(numsims_single))
shocks.allow_single<- runif(50*sum(numsims_single))
shocks.reassess_single<- runif(50*sum(numsims_single))
shocks.jobloss_single<- runif(50*sum(numsims_single))
shocks.spjobloss_single<- runif(50*sum(numsims_single))
shocks.marriage_single<- runif(50*sum(numsims_single))
select_single<-drawselect(numsims_single)
selectC_single<-drawselectC(numsims_single)
set.seed(seed)
partnershocks<-exp(rmvnorm(50*sum(numsims_married),c(0,0),sigma=wagecov))
shocks.wage_married <- partnershocks[,1]
shocks.spwage_married <- partnershocks[,2]
shocks.health_married<- runif(50*sum(numsims_married))
shocks.allow_married<- runif(50*sum(numsims_married))
shocks.reassess_married<- runif(50*sum(numsims_married))
shocks.jobloss_married<- runif(50*sum(numsims_married))
shocks.spjobloss_married<- runif(50*sum(numsims_married))
shocks.marriage_married<- runif(50*sum(numsims_married))
select_married<-drawselect(numsims_married)
selectC_married<-drawselectC(numsims_married)
# trueparams<-c(theta=-0.3, sptheta=-0.1,eta=c(-0.1,-0.05), speta=c(-0.2,-0.1),
#               delta=0.06
#               ,F1=0,F2=0.5,F3=1.25, F4 = 0, F5=0.25, F6=0.75,
#               spF1=1, spF2=1.2, spF3 = 0.5, spF4 = 0.6,
#               pi0.young=0.05,pi1.young=0.28,pi2.young=0.5,pi0.old=0.15,
#               pi1.old=0.4,pi2.old=0.7)
guessvals<-read.csv('outputvals_onlyFTcorr2.csv',header=FALSE)
guessvals<-apply(guessvals,MARGIN=2, function(x) as.numeric(as.character(x)))
newguess<-unlist(as.vector(guessvals[which.min(guessvals[,dim(guessvals)[2]]),-dim(guessvals)[2]]))
names(newguess)<-c("theta_mod","theta_sev","sptheta","eta","etapart","eta_single","etapart_single","speta","spetapart","delta","delta_single", "spdelta",
"F1","F2","F3","Fpart1","Fpart2","Fpart3","Fold","Fpartold","F1_single","F2_single","F3_single","Fpart1_single","Fpart2_single",
"Fpart3_single","Fold_single","Fpartold_single","spF1","spF2","spFpart1","spFpart2","spFold","spFpartold",
"pi0.young","pi1.young","pi2.young","pi0.old","pi1.old","pi2.old")
temp<-paramsetup(newguess,wagepars,spwagepars, ptwork_halfcost=FALSE)
params<-temp$params
param_input<-temp$param_input
rm(temp)
states<-statesetup(dir="../2. Do-Files",asset_gridsize=20,wage_gridsize=10)
temp<-wagesetup(0,0,wage_gridsize=5,spwage_gridsize=5)
Wage<-temp$Wage
spWage<-temp$spWage
wagepars<-temp$wagepars
spwagepars<-temp$spwagepars
#spwagepars$wagevar<-0
rm(temp)
wagecov<-matrix(c(wagepars$wagevar^2,wagepars$wagecorr*(wagepars$wagevar*spwagepars$wagevar),
wagepars$wagecorr*(wagepars$wagevar*spwagepars$wagevar),spwagepars$wagevar^2),2,2)
states<-statesetup(dir="../2. Do-Files",asset_gridsize=5,wage_gridsize=5)
