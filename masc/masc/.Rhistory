#'}
#' @export
#' @import data.table
#' @import plyr
masc_by_phi<-function(treated, donors,treatment=NULL,
tune_pars=list(min_preperiods=NULL,set_f=NULL,
m=NULL,phis=seq(from=0,to=1,length.out=100)),sc_est=sc_estimator,
treatinterval=NULL){
phi_table<-NULL
if(is.null(tune_pars$m))tune_pars$m<-1:ncol(donors)
for(mpos in 1:length(tune_pars$m)){
mval <- tune_pars$m[mpos]
temp_table<-data.frame(tune_pars$phis)
temp_table$m<-mval
temp_table$cv<-NA
temp_table$pred<-NA
if(all(is.null(treatinterval),!is.null(treatment),treatment<=length(treated))) treatinterval<-1:(length(treated)-treatment+1)
if(any(treatment>length(treated),is.null(treatment))) treatinterval<-NA
for(ph in 1:length(tune_pars$phis)){
tunevals<-tune_pars
tunevals$m<-mval
phi_result<-cv_masc(treated=treated, donors=donors,treatment=treatment,sc_est=sc_est,tune_pars=tunevals,
phival=tune_pars$phis[ph])
temp_table[ph,]$cv<-phi_result$cv.error
if(!any(is.na(treatinterval))) temp_table[ph,"pred"]<-mean(phi_result$pred.error[treatinterval])
else temp_table[ph,"pred"]<-NA
}
phi_table<-rbind(phi_table,temp_table)
}
return(phi_table)
}
phi_table<-masc_by_phi(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars=list(m=result$m_hat,
min_preperiods=8,phis=phis))
phi_table
result$phi_hat
result$pred.error
mean(result$pred.error)
?masc
phi_table
data.frame(x=1)
#'phi_table<-masc_by_phi(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars=list(m=result$m_hat,
#'                                              min_preperiods=8,phis=phis))
#'#Printing CV error and prediction error over values of phi. CV error is clearly lowest at intermediary values of phi,
#'#suggesting an estimator between matching and synthetic controls does best at forecasting. The average medium-run treatment
#'#effect is monotonically increasing as we move away from synthetic control and toward matching.
#'print(phi_table)
#'}
#' @export
#' @import data.table
#' @import plyr
masc_by_phi<-function(treated, donors,treatment=NULL,
tune_pars=list(min_preperiods=NULL,set_f=NULL,
m=NULL,phis=seq(from=0,to=1,length.out=100)),sc_est=sc_estimator,
treatinterval=NULL){
phi_table<-NULL
if(is.null(tune_pars$m))tune_pars$m<-1:ncol(donors)
for(mpos in 1:length(tune_pars$m)){
mval <- tune_pars$m[mpos]
temp_table<-data.frame(phi=tune_pars$phis)
temp_table$m<-mval
temp_table$cv<-NA
temp_table$pred<-NA
if(all(is.null(treatinterval),!is.null(treatment),treatment<=length(treated))) treatinterval<-1:(length(treated)-treatment+1)
if(any(treatment>length(treated),is.null(treatment))) treatinterval<-NA
for(ph in 1:length(tune_pars$phis)){
tunevals<-tune_pars
tunevals$m<-mval
phi_result<-cv_masc(treated=treated, donors=donors,treatment=treatment,sc_est=sc_est,tune_pars=tunevals,
phival=tune_pars$phis[ph])
temp_table[ph,]$cv<-phi_result$cv.error
if(!any(is.na(treatinterval))) temp_table[ph,"pred"]<-mean(phi_result$pred.error[treatinterval])
else temp_table[ph,"pred"]<-NA
}
phi_table<-rbind(phi_table,temp_table)
}
return(phi_table)
}
phi_table<-masc_by_phi(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars=list(m=result$m_hat,
min_preperiods=8,phis=phis))
phi_table
phi_table<-masc_by_phi(treated=basque[,1], donors=basque[,-1],treatment=16)
library(masc)
?masc
?masc_by_phi
library(masc)
?masc
?masc_by_phi
?masc_by_phi
?masc_by_phi
?masc_by_phi
library(masc)
?masc_by_phi
?masc_by_phi
?masc_by_phi
?masc_by_phi
?masc_by_phi
library(Synth)
library(data.table)
data(basque)
basque<-as.data.table(basque)
basque <- basque[regionno!=1,]
basque[,regionname:= gsub(" (.*)","",regionname)]
#Grabbing region names:
names<- c(unique(basque[regionno==17,regionname]),unique(basque[regionno!=17,regionname]))
basque <- cbind(basque[regionno==17,gdpcap],
t(reshape(basque[regionno!=17,.(regionno,year,gdpcap)],
idvar='regionno', timevar='year',direction='wide')[,-"regionno",with=FALSE]))
result <- masc(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars_list=list(m=1:10,
min_preperiods=8))
names(result$weights)<-names[-1]
#weights on control units:
print(round(result$weights,3))
#Treatment effects of terrorism on GDP per capita
#in thousands of 1986 US dollars, over 1970-1975:
#(first 6 years of treatment)
print(result$pred.error[1:6,])
#Selected tuning parameters?
print(paste0("Selected matching estimator: ",result$m_hat))
print(paste0("Selected weight on matching: ",result$phi_hat))
#Now, examine the shape of A) the CV error (mean square prediciton error in pre-period) and
# B) average prediction error (AKA treatment effect) over the first 5 treatment years,
#both over values of phi, fixing the matching estimator (moving from matching to synthetic controls)
phis<-seq(0,1,length.out=100)
phi_table<-masc_by_phi(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars=list(m=result$m_hat,
min_preperiods=8,phis=phis))
#Printing CV error and prediction error over values of phi. CV error is clearly lowest at intermediary values of phi,
#suggesting an estimator between matching and synthetic controls does best at forecasting. The average medium-run treatment
#effect is monotonically increasing as we move away from synthetic control and toward matching.
print(phi_table)
?masc
data3 <- data.frame(t = 1:10, treated = 1:10,
control1 = c(15,12,14,22,21,28,29,30,29,31),
control2 = c(10,5,10,12,16,20,22,21,23,21),
control3 = c(-7,-11,-7,-3,-4,-9,-7,-3,-7,-11),
control4 = c(-15,-13,-14,-16,-15,-12,-13,-13,-14,-14))
#controls are above stored as differences from treated unit. Translating into levels:
data3$control1 <- data3$control1 + data3$treated
data3$control2 <- data3$control2 + data3$treated
data3$control3 <- data3$control3 + data3$treated
data3$control4 <- data3$control4 + data3$treated
#defining treatment period:
treatperiod <- 6
result<-masc(treated=data3$treated,donors=data3[,-c(1,2)],treatment=treatperiod,
tune_pars_list=list(m=1:3,min_preperiods=3))
#an equivalent specification:
result<-masc(treated=data3$treated,donors=data3[,-c(1,2)],treatment=treatperiod,
tune_pars_list=list(m=1:3,set_f=list(3:4)))
#Weights selected, for controls 1 through 4 respectively:
print(round(result$weights,2))
is.logical(c(TRUE,FALSE))
is.logical(c(TRUE,FALSE))\
is.logical(c(TRUE,FALSE))
\|
is.logical(c(TRUE,FALSE)\)
is.logical(c(TRUE,FALSE))
is.logical(c(TRUE,2))
is.logical(NULL)
is.logical(c(NULL,1))
source('~//Dropbox/masc/R/crossvalidation.R', echo=TRUE)
remove.packages("masc", lib="~/R/win-library/3.6")
devtools::install_github("maxkllgg/masc")
library(masc)
?masc
data3 <- data.frame(t = 1:10, treated = 1:10,
control1 = c(15,12,14,22,21,28,29,30,29,31),
control2 = c(10,5,10,12,16,20,22,21,23,21),
control3 = c(-7,-11,-7,-3,-4,-9,-7,-3,-7,-11),
control4 = c(-15,-13,-14,-16,-15,-12,-13,-13,-14,-14))
#controls are above stored as differences from treated unit. Translating into levels:
data3$control1 <- data3$control1 + data3$treated
data3$control2 <- data3$control2 + data3$treated
data3$control3 <- data3$control3 + data3$treated
data3$control4 <- data3$control4 + data3$treated
#defining treatment period:
treatperiod <- 6
data<-list(treated = as.matrix(data3$treated),
donors = as.matrix(data3[,-c(1,2)]),
treatment=treatperiod)
result<-masc(data=data, tune_pars_list=list(m=1:3,
min_preperiods=3,
set_f=NA))
#an equivalent specification:
result<-masc(data=data, tune_pars_list=list(m=1:3,
min_preperiods=NA,
set_f=list(3:4)))
#Weights selected, for controls 1 through 4 respectively:
print(round(result$weights,2))
remove.packages("masc", lib="~/R/win-library/3.6")
devtools::install_github("maxkllgg/masc")
library(masc)
?masc
data3 <- data.frame(t = 1:10, treated = 1:10,
control1 = c(15,12,14,22,21,28,29,30,29,31),
control2 = c(10,5,10,12,16,20,22,21,23,21),
control3 = c(-7,-11,-7,-3,-4,-9,-7,-3,-7,-11),
control4 = c(-15,-13,-14,-16,-15,-12,-13,-13,-14,-14))
#controls are above stored as differences from treated unit. Translating into levels:
data3$control1 <- data3$control1 + data3$treated
data3$control2 <- data3$control2 + data3$treated
data3$control3 <- data3$control3 + data3$treated
data3$control4 <- data3$control4 + data3$treated
#defining treatment period:
treatperiod <- 6
result<-masc(treated=data3$treated,donors=data3[,-c(1,2)],treatment=treatperiod,
tune_pars_list=list(m=1:3,min_preperiods=3))
#an equivalent specification:
result<-masc(treated=data3$treated,donors=data3[,-c(1,2)],treatment=treatperiod,
tune_pars_list=list(m=1:3,set_f=list(3:4)))
#Weights selected, for controls 1 through 4 respectively:
print(round(result$weights,2))
First, load the Synth package, which includes the dataset:
if (requireNamespace("Synth",quietly=TRUE) & requireNamespace("data.table",quietly=TRUE)){
library(Synth)
library(data.table)
data(basque)
basque<-as.data.table(basque)
basque <- basque[regionno!=1,]
basque[,regionname:= gsub(" (.*)","",regionname)]
#Grabbing region names:
names<- c(unique(basque[regionno==17,regionname]),unique(basque[regionno!=17,regionname]))
basque <- cbind(basque[regionno==17,gdpcap],
t(reshape(basque[regionno!=17,.(regionno,year,gdpcap)],
idvar='regionno', timevar='year',direction='wide')[,-"regionno",with=FALSE]))
result <- masc(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars_list=list(m=1:10,
min_preperiods=8))
names(result$weights)<-names[-1]
#weights on control units:
print(round(result$weights,3))
#Treatment effects of terrorism on GDP per capita
#in thousands of 1986 US dollars, over 1970-1975:
#(first 6 years of treatment)
print(result$pred.error[1:6,])
#Selected tuning parameters?
print(paste0("Selected matching estimator: ",result$m_hat))
print(paste0("Selected weight on matching: ",result$phi_hat))
#Now, examine the shape of A) the CV error (mean square prediciton error in pre-period) and
# B) average prediction error (AKA treatment effect) over the first 5 treatment years,
#both over values of phi, fixing the matching estimator (moving from matching to synthetic controls)
phis<-seq(0,1,length.out=100)
phi_table<-masc_by_phi(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars=list(m=result$m_hat,
min_preperiods=8),phivals=phis)
#Printing CV error and prediction error over values of phi. CV error is clearly lowest at intermediary values of phi,
#suggesting an estimator between matching and synthetic controls does best at forecasting. The average medium-run treatment
#effect is monotonically increasing as we move away from synthetic control and toward matching.
print(phi_table)
}
library(Synth)
library(data.table)
data(basque)
basque<-as.data.table(basque)
basque <- basque[regionno!=1,]
basque[,regionname:= gsub(" (.*)","",regionname)]
#Grabbing region names:
names<- c(unique(basque[regionno==17,regionname]),unique(basque[regionno!=17,regionname]))
basque <- cbind(basque[regionno==17,gdpcap],
t(reshape(basque[regionno!=17,.(regionno,year,gdpcap)],
idvar='regionno', timevar='year',direction='wide')[,-"regionno",with=FALSE]))
result <- masc(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars_list=list(m=1:10,
min_preperiods=8))
names(result$weights)<-names[-1]
#weights on control units:
print(round(result$weights,3))
#Treatment effects of terrorism on GDP per capita
#in thousands of 1986 US dollars, over 1970-1975:
#(first 6 years of treatment)
print(result$pred.error[1:6,])
#Selected tuning parameters?
print(paste0("Selected matching estimator: ",result$m_hat))
print(paste0("Selected weight on matching: ",result$phi_hat))
#Now, examine the shape of A) the CV error (mean square prediciton error in pre-period) and
# B) average prediction error (AKA treatment effect) over the first 5 treatment years,
#both over values of phi, fixing the matching estimator (moving from matching to synthetic controls)
phis<-seq(0,1,length.out=100)
phi_table<-masc_by_phi(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars=list(m=result$m_hat,
min_preperiods=8),phivals=phis)
#Printing CV error and prediction error over values of phi. CV error is clearly lowest at intermediary values of phi,
#suggesting an estimator between matching and synthetic controls does best at forecasting. The average medium-run treatment
#effect is monotonically increasing as we move away from synthetic control and toward matching.
print(phi_table)
phi_table<-masc_by_phi(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars=list(m=result$m_hat,
min_preperiods=8,phis=phis))
#First, load the Synth package, which includes the dataset:
if (requireNamespace("Synth",quietly=TRUE) & requireNamespace("data.table",quietly=TRUE)){
library(Synth)
library(data.table)
data(basque)
basque<-as.data.table(basque)
basque <- basque[regionno!=1,]
basque[,regionname:= gsub(" (.*)","",regionname)]
#Grabbing region names:
names<- c(unique(basque[regionno==17,regionname]),unique(basque[regionno!=17,regionname]))
basque <- cbind(basque[regionno==17,gdpcap],
t(reshape(basque[regionno!=17,.(regionno,year,gdpcap)],
idvar='regionno', timevar='year',direction='wide')[,-"regionno",with=FALSE]))
result <- masc(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars_list=list(m=1:10,
min_preperiods=8))
names(result$weights)<-names[-1]
#weights on control units:
print(round(result$weights,3))
#Treatment effects of terrorism on GDP per capita
#in thousands of 1986 US dollars, over 1970-1975:
#(first 6 years of treatment)
print(result$pred.error[1:6,])
#Selected tuning parameters?
print(paste0("Selected matching estimator: ",result$m_hat))
print(paste0("Selected weight on matching: ",result$phi_hat))
#Now, examine the shape of A) the CV error (mean square prediciton error in pre-period) and
# B) average prediction error (AKA treatment effect) over the first 5 treatment years,
#both over values of phi, fixing the matching estimator (moving from matching to synthetic controls)
phis<-seq(0,1,length.out=100)
phi_table<-masc_by_phi(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars=list(m=result$m_hat,
min_preperiods=8),phivals=phis)
#Printing CV error and prediction error over values of phi. CV error is clearly lowest at intermediary values of phi,
#suggesting an estimator between matching and synthetic controls does best at forecasting. The average medium-run treatment
#effect is monotonically increasing as we move away from synthetic control and toward matching.
print(phi_table)
}
#First, load the Synth package, which includes the dataset:
if (requireNamespace("Synth",quietly=TRUE) & requireNamespace("data.table",quietly=TRUE)){
library(Synth)
library(data.table)
data(basque)
basque<-as.data.table(basque)
basque <- basque[regionno!=1,]
basque[,regionname:= gsub(" (.*)","",regionname)]
#Grabbing region names:
names<- c(unique(basque[regionno==17,regionname]),unique(basque[regionno!=17,regionname]))
basque <- cbind(basque[regionno==17,gdpcap],
t(reshape(basque[regionno!=17,.(regionno,year,gdpcap)],
idvar='regionno', timevar='year',direction='wide')[,-"regionno",with=FALSE]))
result <- masc(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars_list=list(m=1:10,
min_preperiods=8))
names(result$weights)<-names[-1]
#weights on control units:
print(round(result$weights,3))
#Treatment effects of terrorism on GDP per capita
#in thousands of 1986 US dollars, over 1970-1975:
#(first 6 years of treatment)
print(result$pred.error[1:6,])
#Selected tuning parameters?
print(paste0("Selected matching estimator: ",result$m_hat))
print(paste0("Selected weight on matching: ",result$phi_hat))
#Now, examine the shape of A) the CV error (mean square prediciton error in pre-period) and
# B) average prediction error (AKA treatment effect) over the first 5 treatment years,
#both over values of phi, fixing the matching estimator (moving from matching to synthetic controls)
phis<-seq(0,1,length.out=100)
phi_table<-masc_by_phi(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars=list(m=result$m_hat,
min_preperiods=8,phis=phis))
#Printing CV error and prediction error over values of phi. CV error is clearly lowest at intermediary values of phi,
#suggesting an estimator between matching and synthetic controls does best at forecasting. The average medium-run treatment
#effect is monotonically increasing as we move away from synthetic control and toward matching.
print(phi_table)
}
library(masc)
remove.packages("masc", lib="~/R/win-library/3.6")
library(masc)
remove.packages("masc", lib="~/R/win-library/3.6")
library(masc)
remove.packages("masc", lib="~/R/win-library/3.6")
library(masc)
devtools::install_github("maxkllgg/masc")
?masc
library(masc)
?masc
# Figures 3 and 4:
data3 <- data.frame(t = 1:10, treated = 1:10,
control1 = c(15,12,14,22,21,28,29,30,29,31),
control2 = c(10,5,10,12,16,20,22,21,23,21),
control3 = c(-7,-11,-7,-3,-4,-9,-7,-3,-7,-11),
control4 = c(-15,-13,-14,-16,-15,-12,-13,-13,-14,-14))
#controls are above stored as differences from treated unit. Translating into levels:
data3$control1 <- data3$control1 + data3$treated
data3$control2 <- data3$control2 + data3$treated
data3$control3 <- data3$control3 + data3$treated
data3$control4 <- data3$control4 + data3$treated
#defining treatment period:
treatperiod <- 6
result<-masc(treated=data3$treated,donors=data3[,-c(1,2)],treatment=treatperiod,
tune_pars_list=list(m=1:3,min_preperiods=3))
#an equivalent specification:
result<-masc(treated=data3$treated,donors=data3[,-c(1,2)],treatment=treatperiod,
tune_pars_list=list(m=1:3,set_f=list(3:4)))
#Weights selected, for controls 1 through 4 respectively:
print(round(result$weights,2))
#First, load the Synth package, which includes the dataset:
if (requireNamespace("Synth",quietly=TRUE) & requireNamespace("data.table",quietly=TRUE)){
library(Synth)
library(data.table)
data(basque)
basque<-as.data.table(basque)
basque <- basque[regionno!=1,]
basque[,regionname:= gsub(" (.*)","",regionname)]
#Grabbing region names:
names<- c(unique(basque[regionno==17,regionname]),unique(basque[regionno!=17,regionname]))
basque <- cbind(basque[regionno==17,gdpcap],
t(reshape(basque[regionno!=17,.(regionno,year,gdpcap)],
idvar='regionno', timevar='year',direction='wide')[,-"regionno",with=FALSE]))
result <- masc(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars_list=list(m=1:10,
min_preperiods=8))
names(result$weights)<-names[-1]
#weights on control units:
print(round(result$weights,3))
#Treatment effects of terrorism on GDP per capita
#in thousands of 1986 US dollars, over 1970-1975:
#(first 6 years of treatment)
print(result$pred.error[1:6,])
#Selected tuning parameters?
print(paste0("Selected matching estimator: ",result$m_hat))
print(paste0("Selected weight on matching: ",result$phi_hat))
#Now, examine the shape of A) the CV error (mean square prediciton error in pre-period) and
# B) average prediction error (AKA treatment effect) over the first 5 treatment years,
#both over values of phi, fixing the matching estimator (moving from matching to synthetic controls)
phis<-seq(0,1,length.out=100)
phi_table<-masc_by_phi(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars=list(m=result$m_hat,
min_preperiods=8,phis=phis))
#Printing CV error and prediction error over values of phi. CV error is clearly lowest at intermediary values of phi,
#suggesting an estimator between matching and synthetic controls does best at forecasting. The average medium-run treatment
#effect is monotonically increasing as we move away from synthetic control and toward matching.
print(phi_table)
}
#Example: Terrorism in the Basque Region, from
##Abadie and Gardeazabal (2003).
#First, load the Synth package, which includes the dataset:
if (requireNamespace("Synth",quietly=TRUE) & requireNamespace("data.table",quietly=TRUE)){
library(Synth)
library(data.table)
data(basque)
basque<-as.data.table(basque)
basque <- basque[regionno!=1,]
basque[,regionname:= gsub(" (.*)","",regionname)]
#Grabbing region names:
names<- c(unique(basque[regionno==17,regionname]),unique(basque[regionno!=17,regionname]))
basque <- cbind(basque[regionno==17,gdpcap],
t(reshape(basque[regionno!=17,.(regionno,year,gdpcap)],
idvar='regionno', timevar='year',direction='wide')[,-"regionno",with=FALSE]))
result <- masc(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars_list=list(m=1:10,
min_preperiods=8))
names(result$weights)<-names[-1]
#weights on control units:
print(round(result$weights,3))
#Treatment effects of terrorism on GDP per capita
#in thousands of 1986 US dollars, over 1970-1975:
#(first 6 years of treatment)
print(result$pred.error[1:6,])
#Selected tuning parameters?
print(paste0("Selected matching estimator: ",result$m_hat))
print(paste0("Selected weight on matching: ",result$phi_hat))
#Now, examine the shape of A) the CV error (mean square prediciton error in pre-period) and
# B) average prediction error (AKA treatment effect) over the first 5 treatment years,
#both over values of phi, fixing the matching estimator (moving from matching to synthetic controls)
phis<-seq(0,1,length.out=100)
phi_table<-masc_by_phi(treated=basque[,1], donors=basque[,-1],treatment=16, tune_pars=list(m=result$m_hat,
min_preperiods=8,phis=phis))
#Printing CV error and prediction error over values of phi. CV error is clearly lowest at intermediary values of phi,
#suggesting an estimator between matching and synthetic controls does best at forecasting. The average medium-run treatment
#effect is monotonically increasing as we move away from synthetic control and toward matching.
print(phi_table)
}
install.packages("CVXR")
library(CVXR)
log_det
help(solve)
help("optim")
source('C:/Program Files/Mosek/9.1/tools/platform/win64x86/rmosek/builder.R', echo=TRUE)
attachbuilder()
install.rmosek()
show(install.rmosek)
require("Rmosek")
library(Rmosek)
install.packages("Rmosek", type="source")
library(Rmosek)
R -f lo1.R
-f lo1.R
source('C:/Program Files/Mosek/9.1/tools/examples/rmosek/lo1.R', echo=TRUE)
library(Matrix)
source('C:/Program Files/Mosek/9.1/tools/examples/rmosek/lo1.R', echo=TRUE)
Rmosek::mosek_attachbuilder
source('C:/Program Files/Mosek/9.1/tools/platform/win64x86/rmosek/builder.R', echo=TRUE)
source('C:/Program Files/Mosek/9.1/tools/examples/rmosek/lo1.R', echo=TRUE)
source('C:/Program Files/Mosek/9.1/tools/platform/win64x86/rmosek/builder.R', echo=TRUE)
attachbuilder()
install.rmosek()
install.packages(pkgs = pkgs, repos = repos, type = type, INSTALL_opts = INSTALL_opts, configure.vars = configure.vars, ...)
source('C:/Program Files/Mosek/9.1/tools/examples/rmosek/lo1.R', echo=TRUE)
install.rmosek()
remove.packages("Rmosek", lib="~/R/win-library/3.6")
install.rmosek()
install.packages(pkgs = pkgs, repos = repos, type = type, INSTALL_opts = INSTALL_opts, configure.vars = configure.vars, ...)
install.rmosek()
source('C:/Program Files/Mosek/9.1/tools/platform/win64x86/rmosek/builder.R', echo=TRUE)
attachbuilder()
install.rmosek()
zeros
det_rootn
library(cvxr)
install.acpakges("cvxr")
install.packages("cvxr")
library(CVXR)
det_rootn
zeros
cvx_begin
help(optim)
help(constrOptim)
help(solve)
library(CVXR)
log_det
u <- Variable(K+1)
obj <- t(counts) %*% u
Variable
K<-5
u <- Variable(K+1)
obj <- t(counts) %*% u
